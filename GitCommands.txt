

### **1. Git Setup Commands**  
- **`git --version`**  
   - Check the installed Git version.

- **`git config --global user.name "Your Name"`**  
   - Set your username for commits.

- **`git config --global user.email "youremail@example.com"`**  
   - Set your email for commits.

- **`git config --list`**  
   - View your Git configuration.

---

### **2. Git Repository Commands**  
- **`git init`**  
   - Initialize a new Git repository in the current directory.

- **`git clone <repository-url>`**  
   - Clone (copy) an existing repository from a remote server.

---

### **3. Working with Files**  
- **`git status`**  
   - Show the current status of files in the repository (staged, unstaged, untracked).

- **`git add <filename>`**  
   - Stage changes for commit.

- **`git add .`**  
   - Stage all changes in the current directory.

- **`git rm <filename>`**  
   - Remove a file from the repository.

- **`git mv <old-filename> <new-filename>`**  
   - Rename or move a file.

---

### **4. Commit Changes**  
- **`git commit -m "Your message"`**  
   - Commit staged changes with a message.

- **`git commit -a -m "Your message"`**  
   - Stage and commit all changes in one step.

- **`git log`**  
   - View the commit history.

- **`git log --oneline`**  
   - Display a simplified, one-line version of the log.

---

### **5. Branching and Merging**  
- **`git branch`**  
   - List all branches in the repository.

- **`git branch <branch-name>`**  
   - Create a new branch.

- **`git checkout <branch-name>`**  
   - Switch to the specified branch.

- **`git checkout -b <branch-name>`**  
   - Create and switch to a new branch.

- **`git merge <branch-name>`**  
   - Merge the specified branch into the current branch.

- **`git branch -d <branch-name>`**  
   - Delete a branch.

---

### **6. Sync with Remote Repositories**  
- **`git remote -v`**  
   - Show the remote repository URLs.

- **`git pull`**  
   - Fetch and merge changes from the remote repository.

- **`git push`**  
   - Push changes to the remote repository.

- **`git push -u origin <branch-name>`**  
   - Push a branch to the remote repository and set the upstream branch.

- **`git fetch`**  
   - Fetch changes from the remote repository without merging.

---

### **7. Undoing Changes**  
- **`git reset <file>`**  
   - Unstage a file but keep the changes.

- **`git reset --hard`**  
   - Reset the working directory to the last commit and discard all changes.

- **`git revert <commit-hash>`**  
   - Create a new commit that undoes the changes of a specific commit.

- **`git checkout -- <filename>`**  
   - Discard changes in a file.

---

### **8. Viewing Changes**  
- **`git diff`**  
   - Show differences between the working directory and the staging area.

- **`git diff --staged`**  
   - Show differences between the staged area and the last commit.

---

### **9. Tagging**  
- **`git tag <tag-name>`**  
   - Create a new tag.

- **`git tag`**  
   - List all tags.

- **`git push origin <tag-name>`**  
   - Push a specific tag to the remote repository.

---

### **10. Stashing Changes**  
- **`git stash`**  
   - Save uncommitted changes for later use.

- **`git stash pop`**  
   - Apply stashed changes back to the working directory.

- **`git stash list`**  
   - List all stashed changes.

---

### **11. Inspecting the Repository**  
- **`git show <commit-hash>`**  
   - Show details of a specific commit.

- **`git blame <filename>`**  
   - Show who last modified each line of a file.

- **`git reflog`**  
   - Show a history of all actions (useful for recovery).

---

### **12. Cleaning Up**  
- **`git clean -f`**  
   - Remove untracked files from the working directory.

---

### **Common Workflows:**
1. **Create a New Repository:**  
   ```bash
   git init
   git add .
   git commit -m "Initial commit"
   ```

2. **Clone, Modify, and Push:**  
   ```bash
   git clone <repo-url>
   git checkout -b new-feature
   git add <file>
   git commit -m "Add new feature"
   git push origin new-feature
   ```

3. **Sync Changes from Remote:**  
   ```bash
   git pull origin main
   ```

By mastering these **Git commands**, developers can efficiently collaborate, manage code history, and ensure project stability. ðŸš€